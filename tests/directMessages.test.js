/*
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.
 *
 * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
 * 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π in-memory –ë–î –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ seedDatabase.
 * 2. –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ createDirectChat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞.
 * 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ messageController.getMessages.
 * 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ messageController.sendMessage.
 * 5. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.
 */

process.env.NODE_ENV = 'test';
process.env.USE_IN_MEMORY_DB = 'true';
process.env.JWT_SECRET = process.env.JWT_SECRET || 'test-secret';
process.env.JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'test-refresh-secret';

const path = require('path');

// –ü–æ–¥–º–µ–Ω—è–µ–º –º–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ in-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
const databaseModulePath = path.resolve(__dirname, '..', 'config', 'database.js');
const inMemoryDb = require('./utils/inMemoryDatabase');
require.cache[databaseModulePath] = { exports: inMemoryDb };

const { query } = require('../config/database');
const seedDatabase = require('../database/seed');
const chatController = require('../controllers/chatController');
const messageController = require('../controllers/messageController');

function createMockResponse() {
    const response = { statusCode: 200 };
    response.status = (code) => {
        response.statusCode = code;
        return response;
    };
    response.json = (payload) => {
        response.body = payload;
        return response;
    };
    return response;
}

(async () => {
    try {
        console.log('üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (in-memory)...');
        await seedDatabase();

        const admin = (await query('SELECT id FROM users WHERE username = $1', ['admin'])).rows[0];
        const operator = (await query('SELECT id FROM users WHERE username = $1', ['operator1'])).rows[0];

        if (!admin || !operator) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞');
        }

        console.log('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ/–æ—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ chatController.createDirectChat...');
        const createChatReq = {
            body: { receiverId: operator.id },
            user: { id: admin.id, role: 'admin' }
        };
        const createChatRes = createMockResponse();
        await chatController.createDirectChat(createChatReq, createChatRes);

        if (![200, 201].includes(createChatRes.statusCode) || !createChatRes.body?.chatId) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç (—Å—Ç–∞—Ç—É—Å ${createChatRes.statusCode})`);
        }

        const chatId = createChatRes.body.chatId;
        console.log(`‚úÖ –ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (chatId=${chatId}, isNew=${createChatRes.body.isNew})`);

        console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ messageController.getMessages...');
        const getMessagesReq = {
            params: { chatId },
            query: {},
            user: { id: admin.id, role: 'admin' }
        };
        const getMessagesRes = createMockResponse();
        await messageController.getMessages(getMessagesReq, getMessagesRes);

        if (getMessagesRes.statusCode !== 200 || !Array.isArray(getMessagesRes.body?.messages)) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å ${getMessagesRes.statusCode})`);
        }

        const initialMessagesCount = getMessagesRes.body.messages.length;
        console.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${initialMessagesCount}`);

        console.log('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ messageController.sendMessage...');
        const sendMessageReq = {
            params: { chatId },
            body: { content: '–ê–≤—Ç–æ—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' },
            user: { id: admin.id, role: 'admin' }
        };
        const sendMessageRes = createMockResponse();
        await messageController.sendMessage(sendMessageReq, sendMessageRes);

        if (sendMessageRes.statusCode !== 201 || !sendMessageRes.body?.message) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å ${sendMessageRes.statusCode})`);
        }

        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...');
        const finalMessagesRes = createMockResponse();
        await messageController.getMessages(getMessagesReq, finalMessagesRes);

        if (finalMessagesRes.statusCode !== 200 || !Array.isArray(finalMessagesRes.body?.messages)) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å—Ç–∞—Ç—É—Å ${finalMessagesRes.statusCode})`);
        }

        const finalMessagesCount = finalMessagesRes.body.messages.length;
        if (finalMessagesCount !== initialMessagesCount + 1) {
            throw new Error(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å (–æ–∂–∏–¥–∞–ª–æ—Å—å ${initialMessagesCount + 1}, –ø–æ–ª—É—á–µ–Ω–æ ${finalMessagesCount})`);
        }

        console.log('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π');
        console.error(error);
        process.exit(1);
    }
})();
