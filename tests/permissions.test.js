/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤ –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞: node tests/permissions.test.js
 *
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - NODE_ENV=test npm install
 * - –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000
 * - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (npm run seed)
 */

const API_URL = process.env.API_URL || 'http://localhost:3000/api';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};

// –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;

// –¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const tokens = {};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function request(method, endpoint, token = null, body = null) {
    const headers = {
        'Content-Type': 'application/json'
    };

    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    const options = {
        method,
        headers
    };

    if (body) {
        options.body = JSON.stringify(body);
    }

    const response = await fetch(`${API_URL}${endpoint}`, options);
    const data = await response.json();

    return {
        status: response.status,
        ok: response.ok,
        data
    };
}

function log(message, color = 'reset') {
    console.log(colors[color] + message + colors.reset);
}

function assert(condition, testName) {
    totalTests++;
    if (condition) {
        passedTests++;
        log(`  ‚úì ${testName}`, 'green');
        return true;
    } else {
        failedTests++;
        log(`  ‚úó ${testName}`, 'red');
        return false;
    }
}

async function test(name, fn) {
    log(`\n${name}`, 'cyan');
    try {
        await fn();
    } catch (err) {
        log(`  ‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, 'red');
        failedTests++;
    }
}

// ==================== –¢–ï–°–¢–´ ====================

async function runTests() {
    log('\n='.repeat(60), 'yellow');
    log('üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤ –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', 'yellow');
    log('='.repeat(60), 'yellow');

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await test('1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
        const users = [
            { username: 'admin', password: 'admin123', role: 'admin' },
            { username: 'assist1', password: 'pass123', role: 'assistant' },
            { username: 'assist2', password: 'pass123', role: 'assistant' },
            { username: 'rop1', password: 'pass123', role: 'rop' },
            { username: 'rop2', password: 'pass123', role: 'rop' },
            { username: 'rop3', password: 'pass123', role: 'rop' },
            { username: 'op1a', password: 'pass123', role: 'operator' },
            { username: 'op1b', password: 'pass123', role: 'operator' },
            { username: 'op2a', password: 'pass123', role: 'operator' },
            { username: 'op3a', password: 'pass123', role: 'operator' }
        ];

        for (const user of users) {
            const res = await request('POST', '/auth/login', null, {
                username: user.username,
                password: user.password
            });

            tokens[user.username] = res.data.token;
            assert(res.ok && res.data.token, `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ${user.username} (${user.role})`);
        }
    });

    // 2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–º
    await test('2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã —Å–æ –≤—Å–µ–º–∏', async () => {
        const testUsers = ['rop1', 'op1a', 'assist1'];

        for (const username of testUsers) {
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const usersRes = await request('GET', '/users', tokens.admin);
            const targetUser = usersRes.data.find(u => u.username === username);

            if (!targetUser) {
                log(`  ‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                continue;
            }

            const res = await request('POST', '/chats/direct', tokens.admin, {
                receiverId: targetUser.id
            });

            assert(
                res.ok || res.status === 200,
                `–ê–¥–º–∏–Ω ‚Üí ${username}: ${res.data.message || 'OK'}`
            );
        }
    });

    // 3. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–º
    await test('3. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã —Å–æ –≤—Å–µ–º–∏', async () => {
        const testUsers = ['admin', 'rop1', 'op1a'];

        for (const username of testUsers) {
            const usersRes = await request('GET', '/users', tokens.admin);
            const targetUser = usersRes.data.find(u => u.username === username);

            if (!targetUser) {
                log(`  ‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                continue;
            }

            const res = await request('POST', '/chats/direct', tokens.assist1, {
                receiverId: targetUser.id
            });

            assert(
                res.ok || res.status === 200,
                `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Üí ${username}: ${res.data.message || 'OK'}`
            );
        }
    });

    // 4. –†–û–ü –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–º
    await test('4. –†–û–ü –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã —Å–æ –≤—Å–µ–º–∏', async () => {
        const testUsers = ['admin', 'assist1', 'op1a', 'rop2'];

        for (const username of testUsers) {
            const usersRes = await request('GET', '/users', tokens.admin);
            const targetUser = usersRes.data.find(u => u.username === username);

            if (!targetUser) {
                log(`  ‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                continue;
            }

            const res = await request('POST', '/chats/direct', tokens.rop1, {
                receiverId: targetUser.id
            });

            assert(
                res.ok || res.status === 200,
                `–†–û–ü ‚Üí ${username}: ${res.data.message || 'OK'}`
            );
        }
    });

    // 5. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º
    await test('5. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏', async () => {
        const assistants = ['assist1', 'assist2'];

        for (const username of assistants) {
            const usersRes = await request('GET', '/users', tokens.admin);
            const targetUser = usersRes.data.find(u => u.username === username);

            if (!targetUser) {
                log(`  ‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
                continue;
            }

            const res = await request('POST', '/chats/direct', tokens.op1a, {
                receiverId: targetUser.id
            });

            assert(
                res.ok || res.status === 200,
                `–û–ø–µ—Ä–∞—Ç–æ—Ä ‚Üí ${username}: ${res.data.message || 'OK'}`
            );
        }
    });

    // 6. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Å–≤–æ–µ–º—É –†–û–ü—É
    await test('6. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã —Å–æ —Å–≤–æ–∏–º –†–û–ü–æ–º', async () => {
        const usersRes = await request('GET', '/users', tokens.admin);
        const rop1User = usersRes.data.find(u => u.username === 'rop1');

        if (rop1User) {
            const res = await request('POST', '/chats/direct', tokens.op1a, {
                receiverId: rop1User.id
            });

            assert(
                res.ok || res.status === 200,
                `–û–ø–µ—Ä–∞—Ç–æ—Ä 1–ê ‚Üí –†–û–ü 1 (—Å–≤–æ–π –æ—Ç–¥–µ–ª): ${res.data.message || 'OK'}`
            );
        }
    });

    // 7. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ù–ï –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —á—É–∂–æ–º—É –†–û–ü—É
    await test('7. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ù–ï –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã —Å —á—É–∂–∏–º –†–û–ü–æ–º', async () => {
        const usersRes = await request('GET', '/users', tokens.admin);
        const rop2User = usersRes.data.find(u => u.username === 'rop2');

        if (rop2User) {
            const res = await request('POST', '/chats/direct', tokens.op1a, {
                receiverId: rop2User.id
            });

            assert(
                !res.ok && res.status === 403,
                `–û–ø–µ—Ä–∞—Ç–æ—Ä 1–ê ‚úó –†–û–ü 2 (—á—É–∂–æ–π –æ—Ç–¥–µ–ª): –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω`
            );
        }
    });

    // 8. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ù–ï –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É
    await test('8. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ù–ï –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π', async () => {
        const usersRes = await request('GET', '/users', tokens.admin);
        const op1bUser = usersRes.data.find(u => u.username === 'op1b');
        const op2aUser = usersRes.data.find(u => u.username === 'op2a');

        // –¢–µ—Å—Ç 1: –û–ø–µ—Ä–∞—Ç–æ—Ä —Ç–æ–≥–æ –∂–µ –æ—Ç–¥–µ–ª–∞
        if (op1bUser) {
            const res1 = await request('POST', '/chats/direct', tokens.op1a, {
                receiverId: op1bUser.id
            });

            assert(
                !res1.ok && res1.status === 403,
                `–û–ø–µ—Ä–∞—Ç–æ—Ä 1–ê ‚úó –û–ø–µ—Ä–∞—Ç–æ—Ä 1–ë (—Ç–æ—Ç –∂–µ –æ—Ç–¥–µ–ª): –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω`
            );
        }

        // –¢–µ—Å—Ç 2: –û–ø–µ—Ä–∞—Ç–æ—Ä –¥—Ä—É–≥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        if (op2aUser) {
            const res2 = await request('POST', '/chats/direct', tokens.op1a, {
                receiverId: op2aUser.id
            });

            assert(
                !res2.ok && res2.status === 403,
                `–û–ø–µ—Ä–∞—Ç–æ—Ä 1–ê ‚úó –û–ø–µ—Ä–∞—Ç–æ—Ä 2–ê (–¥—Ä—É–≥–æ–π –æ—Ç–¥–µ–ª): –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω`
            );
        }
    });

    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤
    await test('9. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π', async () => {
        const usersRes = await request('GET', '/users', tokens.admin);
        const assist1User = usersRes.data.find(u => u.username === 'assist1');

        if (assist1User) {
            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
            const res1 = await request('POST', '/chats/direct', tokens.admin, {
                receiverId: assist1User.id
            });

            const chatId1 = res1.data.chatId;

            // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ç–æ—Ç –∂–µ —á–∞—Ç)
            const res2 = await request('POST', '/chats/direct', tokens.admin, {
                receiverId: assist1User.id
            });

            const chatId2 = res2.data.chatId;

            assert(
                chatId1 === chatId2 && res2.data.isNew === false,
                `–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç (ID: ${chatId1})`
            );
        }
    });

    // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º —á–∞—Ç–∞
    await test('10. –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º —á–∞—Ç–∞', async () => {
        const usersRes = await request('GET', '/users', tokens.admin);
        const assist1User = usersRes.data.find(u => u.username === 'assist1');

        if (assist1User) {
            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
            const createRes = await request('POST', '/chats/direct', tokens.admin, {
                receiverId: assist1User.id
            });

            const chatId = createRes.data.chatId;

            // –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
            const adminAccess = await request('GET', `/chats/${chatId}/messages`, tokens.admin);
            assert(
                adminAccess.ok,
                `–ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É ${chatId}`
            );

            // –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
            const assistAccess = await request('GET', `/chats/${chatId}/messages`, tokens.assist1);
            assert(
                assistAccess.ok,
                `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É ${chatId}`
            );

            // –ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ù–ï –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
            const strangerAccess = await request('GET', `/chats/${chatId}/messages`, tokens.op2a);
            assert(
                !strangerAccess.ok && strangerAccess.status === 403,
                `–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ${chatId}`
            );
        }
    });

    // –ò—Ç–æ–≥–∏
    log('\n' + '='.repeat(60), 'yellow');
    log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'yellow');
    log('='.repeat(60), 'yellow');
    log(`\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'cyan');
    log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
    log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`, failedTests > 0 ? 'red' : 'green');
    log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passedTests / totalTests) * 100).toFixed(1)}%`, failedTests > 0 ? 'yellow' : 'green');
    log('');

    process.exit(failedTests > 0 ? 1 : 0);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(err => {
    log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, 'red');
    log(err.stack, 'gray');
    process.exit(1);
});
